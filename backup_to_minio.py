from minio import Minio
from datetime import datetime
import os
import base64
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MINIO_URL = "192.168.5.9:9000"
ACCESS_KEY = "admin"
SECRET_KEY = "secret123"
BUCKET_NAME = "foritech-backups"
FILE_TO_BACKUP = "/home/forybg/logs.txt"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
client = Minio(MINIO_URL, access_key=ACCESS_KEY, secret_key=SECRET_KEY, secure=False)

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ bucket –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
if not client.bucket_exists(BUCKET_NAME):
    client.make_bucket(BUCKET_NAME)

# –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–º–µ —Å timestamp
timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
object_name = f"logs-{timestamp}.txt"

#funkcia za kriptirane 
VAULT_URL = "http://127.0.0.1:8200"
VAULT_TOKEN = "root"
KEY_NAME = "foritech-key"

def encrypt_data(data):
    url = f"{VAULT_URL}/v1/transit/encrypt/{KEY_NAME}"
    headers = {"X-Vault-Token": VAULT_TOKEN}
    payload = {"plaintext": base64.b64encode(data.encode()).decode()}
    response = requests.post(url, json=payload, headers=headers)
    return response.json()["data"]["ciphertext"]




# –ö–∞—á–≤–∞–Ω–µ
with open(FILE_TO_BACKUP, "r") as f:
    raw_data = f.read()

ciphertext = encrypt_data(raw_data)

# –ó–∞–ø–∏—à–∏ –∫—Ä–∏–ø—Ç–∏—Ä–∞–Ω–∏—è —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ
temp_file = f"/tmp/{object_name}"
with open(temp_file, "w") as f:
    f.write(ciphertext)

# –ö–∞—á–≤–∞–Ω–µ –≤ MinIO
client.fput_object(BUCKET_NAME, object_name, temp_file)
print(f"üîê –ö—Ä–∏–ø—Ç–∏—Ä–∞–Ω –∞—Ä—Ö–∏–≤ '{object_name}' –∫–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ MinIO.")
